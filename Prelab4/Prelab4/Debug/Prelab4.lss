
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d4  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fd  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c0  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000227  00000000  00000000  00001bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6d 00 	call	0xda	; 0xda <main>
  9e:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	
	return 0;
}

void initADC(void){
	ADMUX = 6;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 83       	st	Z, r24
	//REFERENCIA AVCC = 5V
	ADMUX |= (1<<REFS0);
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b4:	80 81       	ld	r24, Z
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	80 83       	st	Z, r24
	
	//JUSTIFICACION A LA IZQUIERDA
	ADMUX |= (1<<ADLAR);
  ba:	80 81       	ld	r24, Z
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	
	//HABILITA INTERRUPCION
	ADCSRA	|= (1<<ADIE);
  c6:	80 81       	ld	r24, Z
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	80 83       	st	Z, r24
	
	//HABILITA PREESCALER A 128 - 125kHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
	
	//HABILITA EL ADC
	ADCSRA |= (1<<ADEN);
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <main>:
const uint8_t display[16] = {0x7E, 0x0C, 0xB6, 0x9E, 0xCC, 0xDA, 0xFA, 0x0E, 0xFE, 0xDE, 0xEE, 0xF8, 0x72, 0xBC, 0xF2, 0xE2};


int main(void)
{
	cli();
  da:	f8 94       	cli
	
	//Incremento
	DDRB &= ~(1<<DDB3);		// PB1 como entrada
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB3);	// Activamos Pull-Up
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	85 b9       	out	0x05, r24	; 5

	//Decremento
	DDRB &= ~(1<<DDB2);		// PB2 como entrada
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	8b 7f       	andi	r24, 0xFB	; 251
  ec:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB2);	// Activamos Pull-Up
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	85 b9       	out	0x05, r24	; 5
	
	DDRD=0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8a b9       	out	0x0a, r24	; 10
	
	// Habilitar las interrupciones por cambio de pin
	PCICR |= (1<<PCIE0);
  f8:	e8 e6       	ldi	r30, 0x68	; 104
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2) | (1<<PCINT3);
 102:	eb e6       	ldi	r30, 0x6B	; 107
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8c 60       	ori	r24, 0x0C	; 12
 10a:	80 83       	st	Z, r24
	
	PORTD = 0;
 10c:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
 10e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	initADC();
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	sei();
 116:	78 94       	sei
	
	// Limpiar la bandera de interrupción PCINT0
	PCIFR |= (1<<PCIF0);
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	8b bb       	out	0x1b, r24	; 27
	
	
	while (1)
	{
		//INICIO DE LA LECTURA ADC
		ADCSRA |= (1<<ADSC);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
		
		if (ADCH>contador)
 128:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 12c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 130:	89 17       	cp	r24, r25
 132:	20 f4       	brcc	.+8      	; 0x13c <main+0x62>
		{
		PORTB |= (1<<PORTB5);
 134:	85 b1       	in	r24, 0x05	; 5
 136:	80 62       	ori	r24, 0x20	; 32
 138:	85 b9       	out	0x05, r24	; 5
 13a:	03 c0       	rjmp	.+6      	; 0x142 <main+0x68>
		}
		else
		{
		PORTB &= ~(1<<PORTB5);	
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	8f 7d       	andi	r24, 0xDF	; 223
 140:	85 b9       	out	0x05, r24	; 5
		}
		
		//MULTIPLEXACIÓN
		
		//SE MUESTRA EL PRIMER DISPLAY CON LOS 4 BITS MÁS SIGNIFICATIVOS
		PORTB |= (1<<PORTB0);
 142:	85 b1       	in	r24, 0x05	; 5
 144:	81 60       	ori	r24, 0x01	; 1
 146:	85 b9       	out	0x05, r24	; 5
		PORTD = display[adcValueHigh];
 148:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <adcValueHigh>
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	e0 50       	subi	r30, 0x00	; 0
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 81       	ld	r24, Z
 154:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x80>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x86>
 160:	00 00       	nop
		_delay_ms(5);
		PORTB &= ~(1<<PORTB0);
 162:	85 b1       	in	r24, 0x05	; 5
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	85 b9       	out	0x05, r24	; 5
		
		//SE MUESTRA EL SEGUNDO DISPLAY CON LOS 4 BITS MENOS SIGNIFICATIVOS
		PORTB |= (1<<PORTB1);
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	85 b9       	out	0x05, r24	; 5
		PORTD = display[adcValueLow];
 16e:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <adcValueLow>
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e0 50       	subi	r30, 0x00	; 0
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xa6>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xac>
 186:	00 00       	nop
		_delay_ms(5);
		PORTB &= ~(1<<PORTB1);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	85 b9       	out	0x05, r24	; 5
		
		//SE MUESTRA EL VALOR DEL CONTADOR DE 8 BITS
		PORTB |= (1<<PORTB4);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	80 61       	ori	r24, 0x10	; 16
 192:	85 b9       	out	0x05, r24	; 5
		PORTD = contador;
 194:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	8f e1       	ldi	r24, 0x1F	; 31
 19c:	9e e4       	ldi	r25, 0x4E	; 78
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0xc4>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0xca>
 1a4:	00 00       	nop
		_delay_ms(5);
		PORTB &= ~(1<<PORTB4);
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	8f 7e       	andi	r24, 0xEF	; 239
 1aa:	85 b9       	out	0x05, r24	; 5
	
	}
 1ac:	b8 cf       	rjmp	.-144    	; 0x11e <main+0x44>

000001ae <__vector_21>:
	//HABILITA EL ADC
	ADCSRA |= (1<<ADEN);
	
}

ISR(ADC_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	//SE ALMACENA EL VALOR DE ADC Y SE BORRA EL VALOR DE LA BANDERA
	uint16_t adc_val16 = ADC;
 1c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	uint8_t adcValue = (adc_val16 >> 8);

	ADCSRA |= (1<<ADIF);
 1c8:	ea e7       	ldi	r30, 0x7A	; 122
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 61       	ori	r24, 0x10	; 16
 1d0:	80 83       	st	Z, r24
	
	//SE SEPARA EL VALOR DEL ADC EN 4 BITS CADA UNO
	adcValueHigh = adcValue >> 4;
 1d2:	89 2f       	mov	r24, r25
 1d4:	82 95       	swap	r24
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <adcValueHigh>
	adcValueLow = adcValue & 0x0F;
 1dc:	89 2f       	mov	r24, r25
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <adcValueLow>
	ADCSRA |= (1<<ADSC);
 1e4:	80 81       	ld	r24, Z
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	80 83       	st	Z, r24
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_3>:


// Interrupción para el pulsador de incremento
ISR(PCINT0_vect) {
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
	if (!(PINB & (1<<PB2))) {
 20a:	1a 99       	sbic	0x03, 2	; 3
 20c:	0d c0       	rjmp	.+26     	; 0x228 <__vector_3+0x2c>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <__vector_3+0x16>
 216:	00 c0       	rjmp	.+0      	; 0x218 <__vector_3+0x1c>
 218:	00 00       	nop
		_delay_ms(5); // Antirrebote
		if (!(PINB & (1<<PB2))) {
 21a:	1a 99       	sbic	0x03, 2	; 3
 21c:	05 c0       	rjmp	.+10     	; 0x228 <__vector_3+0x2c>
			contador++;
 21e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}
	}
	// Interrupción para el pulsador de decremento
	if (!(PINB & (1<<PB3))) {
 228:	1b 99       	sbic	0x03, 3	; 3
 22a:	0d c0       	rjmp	.+26     	; 0x246 <__vector_3+0x4a>
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	9e e4       	ldi	r25, 0x4E	; 78
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <__vector_3+0x34>
 234:	00 c0       	rjmp	.+0      	; 0x236 <__vector_3+0x3a>
 236:	00 00       	nop
		_delay_ms(5); // Antirrebote
		if (!(PINB & (1<<PB3))) {
 238:	1b 99       	sbic	0x03, 3	; 3
 23a:	05 c0       	rjmp	.+10     	; 0x246 <__vector_3+0x4a>
			contador--;
 23c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 240:	81 50       	subi	r24, 0x01	; 1
 242:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}
	}

}
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
